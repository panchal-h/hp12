@using SmartLibrary.Resources
@using SmartLibrary.Site.Pages;
@using SmartLibrary.Infrastructure;
@model SmartLibrary.Models.ChangePassword
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = Account.ChangePassword;
}
<div class="wrapper">
    <div class="card-container">
        <div class="card normal profile-card">
            <div class="inner-wrapper">
                <h3 class="title">@Account.ChangePassword</h3>
                @using (Html.SmartLibSecureForm(SmartLibrary.Site.Pages.Actions.ChangePassword, SmartLibrary.Site.Pages.Controllers.User))
                {
                    @Html.HiddenFor(x => x.Id)
                    <div class="form-group floating big-input">
                        <label class="control-label">@Account.CurrentPassword</label>
                        @Html.PasswordFor(m => m.CurrentPassword, new { @class = "form-control" })
                        @Html.HiddenFor(m => m.EncryptedCurrentPassword)
                    </div>
                    <div class="form-group floating big-input">
                        <label class="control-label">@Account.NewPassword</label>
                        @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control" })
                        @Html.HiddenFor(m => m.EncryptedNewPassword)
                    </div>
                    <div class="form-group floating big-input">
                        <label class="control-label">@Account.ConfirmPassword</label>
                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
                        @Html.HiddenFor(m => m.EncryptedConfirmPassword)
                    </div>
                    <button type="submit" class="btn btn-primary btn-block btn-lg">
                        @General.ChangePassword
                    </button>
                }
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <script src="~/Scripts/jsencrypt.min.js"></script>
    <script type="text/javascript">
        var publickKey = '@ProjectConfiguration.RSAPublicKey';
        $(document).ready(function () {
            ActiveMenu("#liChangePassword");
            $("#CurrentPassword").on("blur", function () {
                EncryptPassword($("#CurrentPassword"), $("#EncryptedCurrentPassword"));
            });
            $("#NewPassword").on("blur", function () {
                EncryptPassword($("#NewPassword"), $("#EncryptedNewPassword"));
            });
            $("#ConfirmPassword").on("blur", function () {
                EncryptPassword($("#ConfirmPassword"), $("#EncryptedConfirmPassword"));
            });
        });
        function EncryptPassword($source, $target) {
            // Encrypt with the public key...
            var encrypt = new JSEncrypt();
            encrypt.setPublicKey(publickKey);

            if ($source.val() != undefined && $source.val() != '') {
                var encrypted = encrypt.encrypt($source.val());
                $target.val('');
                $target.val(encrypted);
            }
        }
    </script>
}
