<!doctype html>
<html>
@{
    var language = ProjectSession.UserPortalLanguageId == SystemEnumList.Language.Arabic.GetHashCode() ? "arabic" : "english";
}
<head>
    <meta charset="utf-8">  
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <title>@SmartLibrary.Resources.General.ApplicationName</title>
    <link rel="shortcut icon" href="~/Images/favicon.ico" />   
    <!-- BEGIN Custom CSS-->
    @Styles.Render("~/Content/css")
    <script type="text/javascript">
        var isEnglish = '@SmartLibrary.Infrastructure.ProjectSession.UserPortalLanguageId.Equals(SmartLibrary.Infrastructure.SystemEnumList.Language.English.GetHashCode()).ToString().ToLower()';
    </script>
</head>
<body id="@language">
    <div id="pagebody">
        @RenderBody()
    </div>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/Vendor")
    <script type="text/javascript">
        var IllegalCharMsg = '@SmartLibrary.Resources.Messages.RestrictIllegalCharacters';
        var uploadFileLimitBytes = @Constants.MAXIMUM_FILE_UPLOAD_SIZE_BYTES;
        var validExtensions = {};
        validExtensions.validtypes = '@(string.Join(",", new String[] { SystemEnumList.FileExtension.Jpeg.GetDescription().ToLower(), SystemEnumList.FileExtension.Png.GetDescription().ToLower(), SystemEnumList.FileExtension.Jpg.GetDescription().ToLower() }))';
        var FileSizeError = '@SmartLibrary.Resources.Messages.FileSizeClient';
        var FileTypeError = '@SmartLibrary.Resources.Messages.FileTypeClient';
        $(function () {
            $.xhrPool = [];
            $.xhrPool.abortAll = function () {
                $(this).each(function (i, jqXHR) {   //  cycle through list of recorded connection
                    jqXHR.abort();  //  aborts connection
                    $.xhrPool.splice(i, 1); //  removes from list by index
                });
            }
            $.ajaxSetup({
                cache: false,
                beforeSend: function (jqXHR) {
                    $.xhrPool.push(jqXHR);
                }, //  annd connection to list
                complete: function (jqXHR) {
                    if (jqXHR.status == 403) {
                        window.location.reload();
                    }
                    var i = $.xhrPool.indexOf(jqXHR);   //  get index for current connection completed
                    if (i > -1) $.xhrPool.splice(i, 1); //  removes from list by index
                }
            });
        });

        $.extend(true, $.fn.dataTable.defaults, {
            "initComplete": function (settings, json) {
                $('.dataTables_length').parent().append('<div class="clearfix"></div>');
            },
            //'dom': '<f<t><"grid-bottom"lip>>',
            "dom": 'r<t><"grid-bottom"ilp>',
            "language": {
                "emptyTable": "@SmartLibrary.Resources.Messages.NoRecordFound",
                "info": "@SmartLibrary.Resources.General.Records _START_ @SmartLibrary.Resources.General.To _END_ @SmartLibrary.Resources.General.Of (_TOTAL_)",
                "infoEmpty": "@SmartLibrary.Resources.General.Showing 0 @SmartLibrary.Resources.General.To 0 @SmartLibrary.Resources.General.Of 0 @SmartLibrary.Resources.General.Entries",
                "lengthMenu": "_MENU_",
                "loadingRecords": "@SmartLibrary.Resources.General.Loading",
                "processing": "@SmartLibrary.Resources.General.Processing",
                "zeroRecords": "@SmartLibrary.Resources.Messages.NoRecordFound",
                "paginate": {
                    "first": "@SmartLibrary.Resources.General.First",
                    "last": "@SmartLibrary.Resources.General.Last",
                    "next": "@SmartLibrary.Resources.General.Next",
                    "previous": "@SmartLibrary.Resources.General.Previous"
                }
            }
        });

    //check session Expired for ajax call
    $(document).ajaxSend(function (event, request, opt) {
        if (opt.type !== null && opt.type == "POST") {
            if (opt.url !== "@Url.Action(SmartLibrary.Site.Pages.Actions.IsSessionExpired, SmartLibrary.Site.Pages.Controllers.Account)") {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action(SmartLibrary.Site.Pages.Actions.IsSessionExpired, SmartLibrary.Site.Pages.Controllers.Account)',
                    dataType: "json",
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        if (data.IsExpired) {
                            if (opt.type === "POST") {
                                $.xhrPool.abortAll();
                            }
                            location.href = data.returnUrl + '?returnUrl=' + '@ProjectConfiguration.CurrentRawUrl';
                        }
                    },
                    error: function (request, ajaxOptions, thrownError) { }
                });
            }
        }

    });

        @if (ProjectSession.UserPortalLanguageId == SystemEnumList.Language.Arabic.GetHashCode())
        {
            <text>
        $.extend($.validator.messages, {
            required: "هذا الحقل إلزامي",
            remote: "يرجى تصحيح هذا الحقل للمتابعة",
            email: "رجاء إدخال عنوان بريد إلكتروني صحيح",
            url: "رجاء إدخال عنوان موقع إلكتروني صحيح",
            date: "رجاء إدخال تاريخ صحيح",
            dateISO: "رجاء إدخال تاريخ صحيح (ISO)",
            number: "رجاء إدخال عدد بطريقة صحيحة",
            digits: "رجاء إدخال أرقام فقط",
            creditcard: "رجاء إدخال رقم بطاقة ائتمان صحيح",
            equalTo: "رجاء إدخال نفس القيمة",
            extension: "رجاء إدخال ملف بامتداد موافق عليه",
            maxlength: $.validator.format("الحد الأقصى لعدد الحروف هو {0}"),
            minlength: $.validator.format("الحد الأدنى لعدد الحروف هو {0}"),
            rangelength: $.validator.format("عدد الحروف يجب أن يكون بين {0} و {1}"),
            range: $.validator.format("رجاء إدخال عدد قيمته بين {0} و {1}"),
            max: $.validator.format("رجاء إدخال عدد أقل من أو يساوي {0}"),
            min: $.validator.format("رجاء إدخال عدد أكبر من أو يساوي {0}")

        });
            </text>

        }
    </script>
    @RenderSection("scripts", required: false)
</body>
@Html.Partial("_Messages")
</html>