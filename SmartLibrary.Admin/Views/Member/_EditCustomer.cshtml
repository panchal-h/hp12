@using SmartLibrary.Resources;
@model SmartLibrary.Models.Customer

<div class="modal fade cus-modal" id="customer-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <a href="#" class="modal-close" data-dismiss="modal"><img src="@Url.Content("~/images/modal-close.svg")" alt="@SmartLibrary.Resources.General.Close" /></a>
                <div class="user-image-section">
                    <img src="@Url.Content("~/" + ProjectConfiguration.UserProfileImagePath + "/" + Model.ProfileImagePath)" alt="@SmartLibrary.Resources.General.Member" class="book-stack modal-intro-image" style="border-radius:500px;" onerror="this.src = '@Url.Content("~/Images/default-user.png")'; " />
                </div>
                <h4 class="modal-title">
                    @SmartLibrary.Resources.General.Edit
                    @SmartLibrary.Resources.General.Member
                </h4>
            </div>
            @using (Html.SmartLibSecureForm(SmartLibrary.Admin.Pages.Actions.EditCustomer, SmartLibrary.Admin.Pages.Controllers.Member, new { id = "formEditCustomer" }))
            {
                <div class="modal-body">
                    @Html.HiddenFor(m => m.LoginType)
                    @Html.HiddenFor(m => m.Id)
                    @Html.HiddenFor(m => m.AGUserId)
                    <div class="form-group floating has-value-fixed big-input">
                        <label class="control-label">@General.LoginType</label>
                        @Html.DropDownListFor(m => m.LoginType, SmartLibrary.Infrastructure.EnumHelper.GetItems(typeof(SystemEnumList.LoginType), string.Empty, SmartLibrary.Resources.General.Select.SetArguments(SmartLibrary.Resources.General.UserType)), new { @class = "form-control selectpicker", @data_val_required = SmartLibrary.Resources.Messages.RequiredFieldMessage.SetArguments(SmartLibrary.Resources.General.User), @data_val = "true" })
                    </div>
                    <div class="form-group floating has-value big-input ">
                        <label class="control-label">@General.FirstName</label>
                        @Html.TextBoxFor(m => Model.FirstName, new { @class = "form-control grey" })
                    </div>
                    <div class="form-group floating has-value big-input">
                        <label class="control-label">@General.LastName</label>
                        @Html.TextBoxFor(m => Model.LastName, new { @class = "form-control grey" })
                    </div>
                    <div class="form-group floating has-value big-input">
                        <label class="control-label">@General.Email</label>
                        @Html.TextBoxFor(m => Model.Email, new { @class = "form-control grey no-Focus" })
                    </div>
                    <div class="form-group floating has-value big-input">
                        <label class="control-label">@General.Phone</label>
                        @Html.TextBoxFor(m => Model.Phone, new { @class = "form-control grey" })
                    </div>
                    <div class="form-group floating big-input has-value-fixed">
                        <label class="control-label">@General.Gender</label>
                        <div class="btn-group bootstrap-select form-control">
                            @Html.DropDownListFor(m => Model.Gender, SmartLibrary.Infrastructure.EnumHelper.GetItems(typeof(SmartLibrary.Infrastructure.SystemEnumList.Gender), General.Gender), new { @class = "form-control selectpicker" })
                        </div>
                    </div>
                    <div class="form-group floating big-input has-value-fixed">
                        <label class="control-label">@General.Language</label>
                        <div class="btn-group bootstrap-select form-control">
                            @Html.DropDownListFor(m => Model.Language, SmartLibrary.Infrastructure.EnumHelper.GetItems(typeof(SmartLibrary.Infrastructure.SystemEnumList.Language), General.Language), new { @class = "form-control selectpicker" })
                        </div>
                    </div>

                    <button type="button" value="update" name="action" class="btn btn-primary btn-block btn-lg" onclick="saveCustomer()">
                        @General.Update
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<script>
    $(function () {
        $('#Email').attr("readonly", true);
        if ($('#LoginType').val() == "@SystemEnumList.LoginType.Guest.GetHashCode()") {
            $('.userBlock').hide();
        }
        if ($('#LoginType').val() == "@SystemEnumList.LoginType.Staff.GetHashCode()") {
            $('.userBlock').show();
        }
        $(".selectpicker").prop("readonly", true);
    })
    function saveCustomer() {
        var $form = $("#formEditCustomer");
        if ($form.valid()) {
            var data = $form.serialize();

            $.ajax({
                type: "Post",
                url: "@Url.Action(SmartLibrary.Admin.Pages.Actions.EditCustomer, SmartLibrary.Admin.Pages.Controllers.Member)",
                traditional: true,
                data: data,
                beforeSend: function (xhr) { AddRequestHeader(xhr, $form); },
                success: function (response) {
                    if (response.status == statusConstant.success) {
                        try {
                            var customerDiv = $('div#' + $('#Id').val());
                            if (customerDiv) {
                                customerDiv.find('#customerName').html($('#FirstName').val() + ' ' + $('#LastName').val());
                            }
                        } catch (e) {
                        }
                        $('#customer-modal').modal('hide');
                    }
                    ShowMessage(response.status, response.message, response.title, null, null)
                }
            });
        }

        return false;
    }

</script>