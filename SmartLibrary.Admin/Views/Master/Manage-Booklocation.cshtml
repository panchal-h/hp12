@using SmartLibrary.Infrastructure;
@model IEnumerable<SmartLibrary.Models.BookLocation>
@{
    ViewBag.Title = SmartLibrary.Resources.General.BookLocation;
    Layout = "~/Views/Shared/_Layout.cshtml";
    PageAccessRight currentPageAccessRight = (PageAccessRight)ViewData["CurrentPageAccessRight"];
}

<div class="wrapper">
    <div class="card-container">
        <div class="card">
            <div class="card-header">

                <span>
                    <img src="@Url.Content("~/Images/location-Title.svg")" alt="@SmartLibrary.Resources.General.BookLocation" class="card-header-image"> &nbsp;
                </span>
                <h2 class="card-title card-title-img"><b>@SmartLibrary.Resources.General.BookLocation</b></h2>
                <ul class="filter-panel">
                    <li class="searchbox">
                        <input type="text" class="form-control" placeholder="@SmartLibrary.Resources.General.Search" id="searchText" />
                        <img src="@Url.Content("~/Images/search.svg")" alt="@SmartLibrary.Resources.General.Search" id="SearchBtnForList" />
                    </li>
                    <li>
                        <a href="javascript:void(0);" class="btn btn-primary btn-icon btn-raised resetIcon" title="@SmartLibrary.Resources.General.Reset" onclick="resetSearch()">
                            <img src="@Url.Content("~/Images/close-white.svg")" >
                        </a>
                    </li>

                    <li class="@(currentPageAccessRight.AddUpdate ? "visible-item":"hidden-item")"><a onclick="LoadModal(0)" data-toggle="modal" class="btn btn-primary btn-icon btn-raised" title="@SmartLibrary.Resources.General.Add @SmartLibrary.Resources.General.Location"><img src="@Url.Content("~/Images/plus-white.svg")" alt="Add" class="small"></a></li>
                </ul>
            </div>
            @using (Html.SmartLibSecureForm(SmartLibrary.Admin.Pages.Actions.BookLocation, SmartLibrary.Admin.Pages.Controllers.Master, new { id = "formBookLocation" }))
            {                
                <div class="table-responsive custom custom-datatable">
                    <table class="list-table" id="tblDisplayBookLocation"></table>
                </div>
            }
        </div>
    </div>
    <div id="divModal"></div>
</div>

@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            var activemenus = ["#liBookLocation", "#liMaster"];
            ActiveMenu(activemenus);
            BindTable();
        });

        function BindSearch() {
            var param = {};
            param["searchData"] = $('#searchText').val();
            return param;
        }
        $("#searchText").keydown(function (e) {
            if (e.keyCode == 13) {
                if (!isValidSearchCriteria('searchText')) { return false; }
                BindTable();
            }
        });
        function resetSearch(){
            $("#searchText").val('');
            BindTable();
        }
        function BindTable() {
            if ($.fn.DataTable.isDataTable("#tblDisplayBookLocation")) {
                $('#tblDisplayBookLocation').dataTable().fnDestroy();
                $('#tblDisplayBookLocation').html('<table id="tblDisplayBookLocation" class="table table-hover table-bordered"></table>');
            }
            table = $("#tblDisplayBookLocation").DataTable({
                "lengthChange": true,
                "pageLength": @SmartLibrary.Infrastructure.ProjectConfiguration.PageSize,
                "processing": true,
                "oLanguage": {
                    sProcessing: "<img src='../Images/Loader-Spinner.svg' class='datatable-loadingbar'>"
                },
                "serverSide": true,
                "orderMulti": false,
                'autoWidth': false,
                'searching': false,
                "ajax": {
                    url: '@Url.Action(SmartLibrary.Admin.Pages.Actions.BookLocation, SmartLibrary.Admin.Pages.Controllers.Master)',
                    type: "POST",
                    data: BindSearch()
                },
                "columns": [
                    {
                        "title": "@SmartLibrary.Resources.General.Name", "data": "Name", width: "53%",
                        "render": function (data, type, row) {
                            var str = '<span>' + data + '</span>';
                            return str;
                        }
                    },
                     {
                         "title": "@SmartLibrary.Resources.General.CreatedDate", "data": "CreatedDate", width: "22%",
                         "render": function (data, type, row) {
                             var str= DataTableCustomDateTimeFormat(data, '@SmartLibrary.Infrastructure.ProjectConfiguration.DateFormat.ToUpper()');
                             str = '<span>' + str + '</span>';
                             return str;
                         }
                     },
                     {
                         "title": "@SmartLibrary.Resources.General.Actions",width: "17%",
                         "data": "Active",
                         "class": "action text-center action-icons",
                         "render": function (data, type, row) {
                             var appendstring = '';
                             if (data == true)
                                 appendstring += '<a  class="@(currentPageAccessRight.AddUpdate ? "visible-item":"hidden-item")" href="#" onclick="changeStatus(' + row["ID"] + ',false)"  title="@SmartLibrary.Resources.General.Active"><img src="@Url.Content("~/Images/eye.svg")" alt="Eye" width="15" /></a>'
                             else
                                 appendstring += '<a class="@(currentPageAccessRight.AddUpdate ? "visible-item":"hidden-item")" href="#"  onclick="changeStatus(' + row["ID"] + ',true)" title="@SmartLibrary.Resources.General.InActive"><img src="@Url.Content("~/Images/eye-banned.svg")" alt="Eye Banned" width="15" /></a>'
                             appendstring += ' <a class="@(currentPageAccessRight.AddUpdate ? "visible-item":"hidden-item")" onclick="LoadModal(' + row["ID"] + ')" data-id="' + row["ID"] + '"href="#" title="@SmartLibrary.Resources.General.Edit"><img src="@Url.Content("~/Images/edit.svg")" alt="Edit" width="15" /></a>'
                             appendstring += '<a class="Action delete @(currentPageAccessRight.Delete ? "visible-item":"hidden-item")" data-id="' + row["ID"] + '"href="#" title="@SmartLibrary.Resources.General.Delete" ><img src="@Url.Content("~/Images/delete.svg")" alt="delete" width="15" /></a>';
                             return appendstring;
                         },
                         "orderable": false
                     },

                ],
                "drawCallback": function (settings, json) {
                    InitVariable();
                    InitDeleteConfirmation();
                    RemoveGridBottom("tblDisplayBookLocation");
                }
            });
        }
        function InitVariable() {
            confirmMessage = '@SmartLibrary.Resources.General.ConfirmDeleteMessage';
            confirmTitle = '@SmartLibrary.Resources.General.ConfirmDelete';
            confirmYes = '@SmartLibrary.Resources.General.Yes';
            confirmNo = '@SmartLibrary.Resources.General.No';
        }

        function DeleteCallback(event) {
            if (event != undefined) {
                if (event.target != undefined) {
                    var atag = event.target;
                    if (event.target.tagName == "IMG") {
                        atag = $(event.target).parent();
                    }
                    $.ajax({
                        type: "POST",
                        beforeSend: function (xhr) { xhr.setRequestHeader('__RequestVerificationToken', $('input[name="__RequestVerificationToken"]', $("#formBookLocation")).val()); },
                        url: encodeURI('@Url.Action(SmartLibrary.Admin.Pages.Actions.DeleteBookLocation, SmartLibrary.Admin.Pages.Controllers.Master)'),
                        data: { "id": $(atag).attr('data-id') },
                        cache: false,
                        dataType: 'json',
                        success: function (response) {
                            if (response.success) {
                                ShowMessage(response.status, response.message, response.title, null, null)
                            }
                            else {
                                ShowMessage(response.status, response.message, response.title, null, null)
                            }
                            BindTable();
                        },
                        error: function (jqXHR, exception, errMsg) {
                            alert(errMsg);
                        }
                    });
                }
            }
        }
        function LoadModal(id) {
            $.ajax({
                type: "Get",
                url: "@Url.Action(SmartLibrary.Admin.Pages.Actions.AddEditBookLocation, SmartLibrary.Admin.Pages.Controllers.Master)",
                traditional: true,
                data: { id: id },
                success: function (response) {
                    $("#divModal").html(response);
                    $("#book-location-modal").modal('show');
                    EnableClientSideValidation($('#formManageBookLocation'));
                }
            });
        }

        function changeStatus(id) {
            $.ajax({
                type: "Post",
                url: "@Url.Action(SmartLibrary.Admin.Pages.Actions.ChangeLocationStatus, SmartLibrary.Admin.Pages.Controllers.Master)",
                traditional: true,
                data: { id: id },
                beforeSend: function (xhr) { AddRequestHeader(xhr, $('#formBookLocation')); },
                success: function (response) {
                    if (response.resultData == -1) {
                        ShowMessage(response.status, response.message, response.title, null, null)
                    }
                    else {
                        $("#tblDisplayBookLocation").DataTable().ajax.reload(null, false);
                    }
                }
            });
        }

    </script>
}
